
// firefox doesnt like hash 
// use url encoding for hash instead
$handle-border-color: '%23333333';
$handle-hover-border-color: '%23111111';
$handle-active-border-color: '%23000000';

$handle-bg: '%23FFFFFF';
$handle-hover-bg: '%23ebebeb';
$handle-active-bg: '%23adadad';

$arrow-color: '%23000000';

$handle-active-shadow: inset 0 3px 5px rgba(0,0,0, 0.125);

$shadow: #666;
$base-size: 14px;
$stroke: 1.0;

  // outer arrow
  //$half-no-arrow: 'M12,7c0,2.763-2.238,5.002-5,5.002c-2.761,0-5-2.239-5-5.002';
  //$half-arrow: 'M12,7c0-2.159-1.371-3.994-3.289-4.693L7,1L5.288,2.308C3.371,3.008,2,4.842,2,7';
  
  // transparent inner arrow
  $half-arrow: 'M7.002,1L7,1L6.998,1C3.686,1.001,1,3.688,1,7v0h0.999v0c0-1.131,0.39-2.163,1.022-3L6,4l1-2l1,2l2.977,0c0.633,0.838,1.022,1.869,1.022,3v0H13v0C13,3.688,10.314,1.001,7.002,1z';
  $half-no-arrow: 'M11.001,6L11.001,6c0,2.762-2.238,5-5,5s-5-2.238-5-5v0H0v0c0,3.313,2.687,6,6,6s6-2.687,6-6v0H11.001z';




.touch-handle {
  position: absolute;
  cursor: move;
  &:before {
    box-shadow: 0 0 5px #{$shadow};
  }

}

// mixin handle is responsible for the svg content only
@mixin handle ($size, $state, $num-directions) {
  // stroke should be the same for all sizes. Reduce the stroke by the amount it will be transform-scaled up
  $stroke-width: $stroke / $size;

  $px-size: $base-size * $size;
  $center: strip-units($base-size) / 2;
  @if $state < 1 {
    $stroke-col: $handle-border-color;
    $bg-col: $handle-bg
  } @else if $state == 1{
    $stroke-col: $handle-hover-border-color;
    $bg-col: $handle-hover-bg
  } @else if $state > 1 {
    $stroke-col: $handle-active-border-color;
    $bg-col: $handle-active-bg
  }
  
  $t-tip: 2;
  $t-height: (1.5 * $size + 2) / $size;
  $t-width: $t-height;
  
  
  $single-arrow: "<polyline fill='#{$arrow-color}' points='#{$center},#{$t-tip} #{$center + $t-width},#{$t-tip + $t-height} #{$center - $t-width}, #{$t-tip + $t-height} ' />"; 
  $arrow: "";
  @if $num-directions > 0 {
      $arrow: "#{$single-arrow}";
  }
  @if $num-directions > 1 {
      $arrow: "#{$arrow}<g transform='rotate(180 #{$center} #{$center})'>#{$single-arrow}</g>";
  }
  @if $num-directions > 2 {
      $arrow: "#{$arrow}<g transform='rotate(90 #{$center} #{$center})'>#{$single-arrow}</g>";
  }
  @if $num-directions > 3 {
      $arrow: "#{$arrow}<g transform='rotate(270 #{$center} #{$center})'>#{$single-arrow}</g>";
  }
  
  
  

  $handle-svg: "<svg xmlns:svg='http://www.w3.org/2000/svg' xmlns='http://www.w3.org/2000/svg' width='#{$px-size}' height='#{$px-size}' version='1.1'><g transform='scale(#{$size}, #{$size})'><circle fill='#{$bg-col}' stroke='#{$stroke-col}' stroke-width='#{$stroke-width}' stroke-miterlimit='10' cx='#{$center}' cy='#{$center}' r='#{$center - 1}' />#{$arrow}</g></svg>";
   content: url("data:image/svg+xml;utf8,#{$handle-svg}");
}






@mixin curved-tail-angle($angle) {
  @include vendor-prefix-function(transform, rotate, $angle);
}


@each $size in 1,2,3 {
  @each $num-directions in 0, 1, 2, 3, 4 {
    $width: $base-size * $size;
    $height: $base-size * $size;
    .grab-handle-#{$size}-#{$num-directions} {
      width: $width;
      height: $height;
      margin-left: -$size*$base-size /2;
      margin-top: -$size*$base-size /2;
      &:before {
        @include handle($size, 0, $num-directions);
        width: $width;
        height: $height;
      }
      &:hover {
        &:before {
          @include handle($size, 1, $num-directions);
        }
      }
      &:active {
        &:before {
          @include handle($size, 2, $num-directions);
        }
      }
    }
  }
}


$angle-size: 45deg;
$current-angle: 0deg;
@while $current-angle < 315deg {
  .grab-handle-angle-#{strip-units($current-angle)} {
    @include curved-tail-angle($current-angle);
  }
  $current-angle: $current-angle + $angle-size;
}


@mixin grab-pos($v, $h) {
  @if $v == 'top' {
    top: 0;
  } @else if $v == 'center' {
    top: 50%;
  } @else {
    bottom: 0;
  }
  @if $h == 'left' {
    left: 0;
  } @else if $v == 'center' {
    left: 50%;
  } @else {
    right: 0;
  }
}


@each $v in "top", "center", "bottom" {
  @each $h in "left", "center", "right" {
    .grab-#{$v}-#{$h} {
      @include grab-pos($v, $h);
      @extend .touch-handle;
      //@include interactivity;
    }
  }
}

